(function() {var implementors = {};
implementors["python"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"enum\" href=\"python/ast/enum.VarType.html\" title=\"enum python::ast::VarType\">VarType</a>","synthetic":true,"types":["python::ast::VarType"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"enum\" href=\"python/ast/enum.Instruction.html\" title=\"enum python::ast::Instruction\">Instruction</a>","synthetic":true,"types":["python::ast::Instruction"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"python/ast/struct.Program.html\" title=\"struct python::ast::Program\">Program</a>","synthetic":true,"types":["python::ast::Program"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"python/codegen/buffer/struct.Buffer.html\" title=\"struct python::codegen::buffer::Buffer\">Buffer</a>","synthetic":true,"types":["python::codegen::buffer::Buffer"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"python/codegen/generator/struct.CTarget.html\" title=\"struct python::codegen::generator::CTarget\">CTarget</a>","synthetic":true,"types":["python::codegen::generator::CTarget"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"python/codegen/generator/struct.Module.html\" title=\"struct python::codegen::generator::Module\">Module</a>","synthetic":true,"types":["python::codegen::generator::Module"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()